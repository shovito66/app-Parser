*************************************************************************
**   AndroBugs Framework - Android App Security Vulnerability Scanner  **
**                            version: 1.0.0                           **
**     author: Yu-Cheng Lin (@AndroBugs, http://www.AndroBugs.com)     **
**               contact: androbugs.framework@gmail.com                **
*************************************************************************
Platform: Android
Package Name: com.mtb.mobilebanking
Package Version Name: 2.0.3
Package Version Code: 133
Min Sdk: 16
Target Sdk: 28
MD5   : 4165b28ed8a0b6d0d09f538ca120aab2
SHA1  : 8ca3a0ddc6d131c1ffae52142b4b62125cff0fa7
SHA256: 8ef215b2a76c527f0a95d44225382b28f86e1713b2ec0d7f9073bd308342d676
SHA512: 816d3c43a860f4675ae3e033e3434e5ec0550d1a85931a523e8f73dd79abe4e3fe588c07f98947ac864eca70df6e30d0c3ab10b4112ca845dd566f1fb48afab7
Analyze Signature: 1786920d05169ba9a9491aa8ccaef3fb48248a627ae5c58398c8ae973e376fde347b140904c63437c6a049dd93d73cca57530f2645b4708a6261c636709123a0
------------------------------------------------------------------------------------------------
[Critical] <#BID 64208, CVE-2013-6271#> Fragment Vulnerability Checking (Vector ID: FRAGMENT_INJECTION):
           'Fragment' or 'Fragment for ActionbarSherlock' has a severe vulnerability prior to Android 4.4 (API 19).
           Please check:
           (1)http://developer.android.com/reference/android/os/Build.VERSION_CODES.html#KITKAT
           (2)http://developer.android.com/reference/android/preference/PreferenceActivity.html#isValidFragment(java.lang.String)
           (3)http://stackoverflow.com/questions/19973034/isvalidfragment-android-api-19
           (4)http://securityintelligence.com/new-vulnerability-android-framework-fragment-injection/
           (5)http://securityintelligence.com/wp-content/uploads/2013/12/android-collapses-into-fragments.pdf
           (6)https://cureblog.de/2013/11/cve-2013-6271-remove-device-locks-from-android-phone/
               You MUST override 'isValidFragment' method in every "PreferenceActivity" class to avoid Exception throwing in Android 4.4:
                   Lcom/battleent/materialpreferences/AppCompatPreferenceActivity;
               All of the potential vulnerable "fragment":
                   Landroidx/lifecycle/ReportFragment;
                   Lcom/google/android/gms/maps/MapFragment;
                   Lcom/google/android/gms/maps/StreetViewPanoramaFragment;
                   Lcom/tbruyelle/rxpermissions2/RxPermissionsFragment;
                   Lcom/google/android/gms/common/api/internal/zza;
[Critical] <KeyStore><Hacker> KeyStore Protection Checking (Vector ID: HACKER_KEYSTORE_SSL_PINNING):
           The Keystores below seem using "byte array" or "hard-coded cert info" to do SSL pinning (Total: 4). Please manually check:
               => Lcom/mtb/mobilebanking/MTBHttpAuthClient;->getDataFromSerVer(Ljava/lang/String;)Ljava/lang/String; (0x4c) --->
                    Ljava/security/KeyStore;->load(Ljava/io/InputStream; [C)V
               => Lcom/mtb/mobilebanking/qrpayment/QRPAddCardFragment;->Tokenize(Ljava/lang/String; Ljava/lang/String;)Ljava/lang/String;
                    (0x102) ---> Ljava/security/KeyStore;->load(Ljava/io/InputStream; [C)V
               => Lcom/mtb/mobilebanking/qrpayment/QrPaymentFragmentLatest;->payfrombackend(Ljava/lang/String; Ljava/lang/String;
                    Ljava/lang/String;)Ljava/lang/String; (0x130) ---> Ljava/security/KeyStore;->load(Ljava/io/InputStream; [C)V
               => Lcom/mtb/mobilebanking/qrpayment/QrPaymentFragmentLatest;->transactionResultInquiry(Ljava/lang/String;
                    Ljava/lang/String;)Ljava/lang/String; (0x102) ---> Ljava/security/KeyStore;->load(Ljava/io/InputStream; [C)V
[Critical] <SSL_Security> SSL Implementation Checking (Verifying Host Name in Custom Classes) (Vector ID: SSL_CN1):
           This app allows Self-defined HOSTNAME VERIFIER to accept all Common Names(CN).
           This is a critical vulnerability and allows attackers to do MITM attacks with his valid certificate without your knowledge.
           Case example:
           (1)http://osvdb.org/96411
           (2)http://www.wooyun.org/bugs/wooyun-2010-042710
           (3)http://www.wooyun.org/bugs/wooyun-2010-052339
           Also check Google doc: http://developer.android.com/training/articles/security-ssl.html (Caution: Replacing HostnameVerifier can
           be very dangerous).
           OWASP Mobile Top 10 doc: https://www.owasp.org/index.php/Mobile_Top_10_2014-M3
           Check this book to see how to solve this issue: http://goo.gl/BFb65r

           To see what's the importance of Common Name(CN) verification.
           Use Google Chrome to navigate:
            - https://www.google.com   => SSL certificate is valid
            - https://60.199.175.158/  => This is the IP address of google.com, but the CN is not match, making the certificate invalid. You
           still can go Google.com but now you cannot distinguish attackers from normal users

           Please check the code inside these methods:
               Lorg/jsoup/helper/HttpConnection$Response$1;->verify(Ljava/lang/String; Ljavax/net/ssl/SSLSession;)Z
[Critical] <SSL_Security> SSL Connection Checking (Vector ID: SSL_URLS_NOT_IN_HTTPS):
           URLs that are NOT under SSL (Total:13):
               http://schemas.xmlsoap.org/soap/encoding/
                   => Lorg/ksoap2/SoapEnvelope;-><init>(I)V
                   => Lorg/ksoap2/serialization/MarshalBase64;->register(Lorg/ksoap2/serialization/SoapSerializationEnvelope;)V
               http://schemas.xmlsoap.org/soap/envelope/
                   => Lorg/ksoap2/SoapFault;->write(Lorg/xmlpull/v1/XmlSerializer;)V
                   => Lorg/ksoap2/SoapFault;->parse(Lorg/xmlpull/v1/XmlPullParser;)V
                   => Lorg/ksoap2/SoapEnvelope;-><init>(I)V
               http://tempuri.org/
                   => Lcom/mtb/mobilebanking/qrpayment/QRPAddCardFragment;-><init>()V
                   => Lcom/mtb/mobilebanking/qrpayment/QRPAddCardFragment;->Tokenize(Ljava/lang/String;
                    Ljava/lang/String;)Ljava/lang/String;
                   => Lcom/mtb/mobilebanking/qrpayment/QrPaymentFragmentLatest;-><init>()V
                   => Lcom/mtb/mobilebanking/qrpayment/QrPaymentFragmentLatest;->transactionResultInquiry(Ljava/lang/String;
                    Ljava/lang/String;)Ljava/lang/String;
                   => Lcom/mtb/mobilebanking/qrpayment/QrPaymentFragmentLatest;->payfrombackend(Ljava/lang/String; Ljava/lang/String;
                    Ljava/lang/String;)Ljava/lang/String;
               http://tempuri.org/IMTBToUMPS/GetMPQRCEMVTransactionRequest
                   => Lcom/mtb/mobilebanking/qrpayment/QrPaymentFragmentLatest;-><init>()V
                   => Lcom/mtb/mobilebanking/qrpayment/QrPaymentFragmentLatest;->payfrombackend(Ljava/lang/String; Ljava/lang/String;
                    Ljava/lang/String;)Ljava/lang/String;
               http://tempuri.org/IMTBToUMPS/GetTokenRequest
                   => Lcom/mtb/mobilebanking/qrpayment/QRPAddCardFragment;->Tokenize(Ljava/lang/String;
                    Ljava/lang/String;)Ljava/lang/String;
                   => Lcom/mtb/mobilebanking/qrpayment/QRPAddCardFragment;-><init>()V
               http://tempuri.org/IMTBToUMPS/GetTransactionResultInquiryRequest
                   => Lcom/mtb/mobilebanking/qrpayment/QrPaymentFragmentLatest;-><init>()V
                   => Lcom/mtb/mobilebanking/qrpayment/QrPaymentFragmentLatest;->transactionResultInquiry(Ljava/lang/String;
                    Ljava/lang/String;)Ljava/lang/String;
               http://www.
                   => Lorg/kxml2/wap/wml/Wml;-><clinit>()V
               http://xml.apache.org/xml-soap
                   => Lorg/ksoap2/serialization/MarshalHashtable;->register(Lorg/ksoap2/serialization/SoapSerializationEnvelope;)V
               http://xmlpull.org/v1/doc/
                   => Lorg/kxml2/io/KXmlParser;->a(Ljava/lang/String; Z Ljava/lang/String;)Z
               http://xmlpull.org/v1/doc/features.html#indent-output
                   => Lorg/kxml2/io/KXmlSerializer;->getFeature(Ljava/lang/String;)Z
                   => Lorg/kxml2/io/KXmlSerializer;->setFeature(Ljava/lang/String; Z)V
               http://xmlpull.org/v1/doc/features.html#process-namespaces
                   => Lorg/kxml2/wap/WbxmlParser;->getFeature(Ljava/lang/String;)Z
                   => Lorg/kxml2/wap/WbxmlParser;->setFeature(Ljava/lang/String; Z)V
                   => Lorg/xmlpull/v1/XmlPullParserFactory;->isNamespaceAware()Z
                   => Lorg/xmlpull/v1/XmlPullParserFactory;->setNamespaceAware(Z)V
                   => Lorg/kxml2/io/KXmlParser;->setFeature(Ljava/lang/String; Z)V
                   => Lorg/kxml2/io/KXmlParser;->getFeature(Ljava/lang/String;)Z
                   => Lorg/ksoap2/transport/Transport;->parseResponse(Lorg/ksoap2/SoapEnvelope; Ljava/io/InputStream;)V
               http://xmlpull.org/v1/doc/features.html#validation
                   => Lorg/xmlpull/v1/XmlPullParserFactory;->setValidating(Z)V
                   => Lorg/xmlpull/v1/XmlPullParserFactory;->isValidating()Z
               http://xmlpull.org/v1/doc/properties.html#xmldecl-standalone
                   => Lorg/kxml2/kdom/Document;->parse(Lorg/xmlpull/v1/XmlPullParser;)V
[Critical] <SSL_Security> SSL Implementation Checking (WebViewClient for WebView) (Vector ID: SSL_WEBVIEW):
           DO NOT use "handler.proceed();" inside those methods in extended "WebViewClient", which allows the connection even if the SSL
           Certificate is invalid (MITM Vulnerability).
           References:
           (1)A View To A Kill: WebView Exploitation: https://www.iseclab.org/papers/webview_leet13.pdf
           (2)OWASP Mobile Top 10 doc: https://www.owasp.org/index.php/Mobile_Top_10_2014-M3
           (3)https://jira.appcelerator.org/browse/TIMOB-4488
           Vulnerable codes:
               Lcom/mtb/mobilebanking/PrivilegeDetailsActivity$1;->onReceivedSslError(Landroid/webkit/WebView;
                    Landroid/webkit/SslErrorHandler; Landroid/net/http/SslError;)V
               => Lcom/mtb/mobilebanking/PrivilegeDetailsActivity;->onCreate(Landroid/os/Bundle;)V (0x184) --->
                    Landroid/webkit/WebView;->setWebViewClient(Landroid/webkit/WebViewClient;)V
[Critical] <SSL_Security> SSL Certificate Verification Checking (Vector ID: SSL_X509):
           This app DOES NOT check the validation of SSL Certificate. It allows self-signed, expired or mismatch CN certificates for SSL
           connection.
           This is a critical vulnerability and allows attackers to do MITM attacks without your knowledge.
           If you are transmitting users' username or password, these sensitive information may be leaking.
           Reference:
           (1)OWASP Mobile Top 10 doc: https://www.owasp.org/index.php/Mobile_Top_10_2014-M3
           (2)Android Security book: http://goo.gl/BFb65r
           (3)https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=134807561
           This vulnerability is much more severe than Apple's "goto fail" vulnerability: http://goo.gl/eFlovw
           Please do not try to create a "X509Certificate" and override "checkClientTrusted", "checkServerTrusted", and "getAcceptedIssuers"
           functions with blank implementation.
           We strongly suggest you use the existing API instead of creating your own X509Certificate class.
           Please modify or remove these vulnerable code:
               [Confirm Vulnerable]
               => Lorg/jsoup/helper/HttpConnection$Response$2;
                     -> used by: Lorg/jsoup/helper/HttpConnection$Response;->d()V
[Warning]  External Storage Accessing (Vector ID: EXTERNAL_STORAGE):
           External storage access found (Remember DO NOT write important files to external storages):
               => Landroidx/core/content/FileProvider;->b(Landroid/content/Context;
                    Ljava/lang/String;)Landroidx/core/content/FileProvider$a; (0xc8) --->
                    Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;
               => Landroidx/core/os/EnvironmentCompat;->getStorageState(Ljava/io/File;)Ljava/lang/String; (0x1e) --->
                    Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;
               => Lcom/mtb/mobilebanking/FileCache;-><init>(Landroid/content/Context;)V (0x22) --->
                    Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;
[Warning] <Sensitive_Information> Getting IMEI and Device ID (Vector ID: SENSITIVE_DEVICE_ID):
           This app has code getting the "device id(IMEI)" but there are problems with this "TelephonyManager.getDeviceId()" approach.
           1.Non-phones: Wifi-only devices or music players that don't have telephony hardware just don't have this kind of unique
           identifier.
           2.Persistence: On devices which do have this, it persists across device data wipes and factory resets. It's not clear at all if,
           in this situation, your app should regard this as the same device.
           3.Privilege:It requires READ_PHONE_STATE permission, which is irritating if you don't otherwise use or need telephony.
           4.Bugs: We have seen a few instances of production phones for which the implementation is buggy and returns garbage, for example
           zeros or asterisks.
           If you want to get an unique id for the device, we suggest you use "Installation" framework in the following article.
           Please check the reference: http://android-developers.blogspot.tw/2011/03/identifying-app-installations.html
               => Lcom/mtb/mobilebanking/qrpayment/QRPAddCardFragment;->getIMEI()Ljava/lang/String; (0x46) --->
                    Landroid/telephony/TelephonyManager;->getDeviceId()Ljava/lang/String;
[Warning] <WebView> WebView Local File Access Attacks Checking (Vector ID: WEBVIEW_ALLOW_FILE_ACCESS):
           Found "setAllowFileAccess(true)" or not set(enabled by default) in WebView. The attackers could inject malicious script into
           WebView and exploit the opportunity to access local resources. This can be mitigated or prevented by disabling local file system
           access. (It is enabled by default)
           Note that this enables or disables file system access only. Assets and resources are still accessible using file:///android_asset
           and file:///android_res.
           The attackers can use "mWebView.loadUrl("file:///data/data/[Your_Package_Name]/[File]");" to access app's local file.
           Reference: (1)https://labs.mwrinfosecurity.com/blog/2012/04/23/adventures-with-android-webviews/
                      (2)http://developer.android.com/reference/android/webkit/WebSettings.html#setAllowFileAccess(boolean)
           Please add or modify "yourWebView.getSettings().setAllowFileAccess(false)" to your WebView:
               Lcom/mtb/mobilebanking/FAQExpandCollapse;->onCreate(Landroid/os/Bundle;)V
               Lcom/mtb/mobilebanking/PrivilegeDetailsActivity;->onCreate(Landroid/os/Bundle;)V
[Warning] <WebView> WebView Potential XSS Attacks Checking (Vector ID: WEBVIEW_JS_ENABLED):
           Found "setJavaScriptEnabled(true)" in WebView, which could exposed to potential XSS attacks. Please check the web page code
           carefully and sanitize the output:
               => Lcom/mtb/mobilebanking/FAQExpandCollapse;->onCreate(Landroid/os/Bundle;)V (0x88) --->
                    Landroid/webkit/WebSettings;->setJavaScriptEnabled(Z)V
               => Lcom/mtb/mobilebanking/PrivilegeDetailsActivity;->onCreate(Landroid/os/Bundle;)V (0xce) --->
                    Landroid/webkit/WebSettings;->setJavaScriptEnabled(Z)V
[Notice] <Database><#CVE-2011-3901#> Android SQLite Databases Vulnerability Checking (Vector ID: DB_SQLITE_JOURNAL):
           This app is using Android SQLite databases but it's "NOT" suffering from SQLite Journal Information Disclosure Vulnerability.
[Notice]  File Unsafe Delete Checking (Vector ID: FILE_DELETE):
           Everything you delete may be recovered by any user or attacker, especially rooted devices.
           Please make sure do not use "file.delete()" to delete essential files.
           Check this video: https://www.youtube.com/watch?v=tGw1fxUD-uY
               => Landroidx/core/content/FileProvider;->delete(Landroid/net/Uri; Ljava/lang/String; [Ljava/lang/String;)I (0xc) --->
                    Ljava/io/File;->delete()Z
               => Landroidx/core/graphics/TypefaceCompatUtil;->copyToDirectBuffer(Landroid/content/Context; Landroid/content/res/Resources;
                    I)Ljava/nio/ByteBuffer; (0x1c) ---> Ljava/io/File;->delete()Z
               => Landroidx/core/graphics/TypefaceCompatUtil;->copyToDirectBuffer(Landroid/content/Context; Landroid/content/res/Resources;
                    I)Ljava/nio/ByteBuffer; (0x2c) ---> Ljava/io/File;->delete()Z
               => Landroidx/core/graphics/TypefaceCompatUtil;->copyToDirectBuffer(Landroid/content/Context; Landroid/content/res/Resources;
                    I)Ljava/nio/ByteBuffer; (0x36) ---> Ljava/io/File;->delete()Z
               => Landroidx/core/graphics/c;->createFromInputStream(Landroid/content/Context;
                    Ljava/io/InputStream;)Landroid/graphics/Typeface; (0x1c) ---> Ljava/io/File;->delete()Z
               => Landroidx/core/graphics/c;->createFromInputStream(Landroid/content/Context;
                    Ljava/io/InputStream;)Landroid/graphics/Typeface; (0x34) ---> Ljava/io/File;->delete()Z
               => Landroidx/core/graphics/c;->createFromInputStream(Landroid/content/Context;
                    Ljava/io/InputStream;)Landroid/graphics/Typeface; (0x3e) ---> Ljava/io/File;->delete()Z
               => Landroidx/core/graphics/c;->createFromInputStream(Landroid/content/Context;
                    Ljava/io/InputStream;)Landroid/graphics/Typeface; (0x46) ---> Ljava/io/File;->delete()Z
               => Landroidx/core/graphics/c;->createFromResourcesFontFile(Landroid/content/Context; Landroid/content/res/Resources; I
                    Ljava/lang/String; I)Landroid/graphics/Typeface; (0x1c) ---> Ljava/io/File;->delete()Z
               => Landroidx/core/graphics/c;->createFromResourcesFontFile(Landroid/content/Context; Landroid/content/res/Resources; I
                    Ljava/lang/String; I)Landroid/graphics/Typeface; (0x34) ---> Ljava/io/File;->delete()Z
               => Landroidx/core/graphics/c;->createFromResourcesFontFile(Landroid/content/Context; Landroid/content/res/Resources; I
                    Ljava/lang/String; I)Landroid/graphics/Typeface; (0x3e) ---> Ljava/io/File;->delete()Z
               => Landroidx/core/graphics/c;->createFromResourcesFontFile(Landroid/content/Context; Landroid/content/res/Resources; I
                    Ljava/lang/String; I)Landroid/graphics/Typeface; (0x46) ---> Ljava/io/File;->delete()Z
               => Landroidx/core/util/AtomicFile;->delete()V (0x4) ---> Ljava/io/File;->delete()Z
               => Landroidx/core/util/AtomicFile;->delete()V (0xe) ---> Ljava/io/File;->delete()Z
               => Landroidx/core/util/AtomicFile;->failWrite(Ljava/io/FileOutputStream;)V (0x14) ---> Ljava/io/File;->delete()Z
               => Landroidx/core/util/AtomicFile;->finishWrite(Ljava/io/FileOutputStream;)V (0x14) ---> Ljava/io/File;->delete()Z
               => Landroidx/core/util/AtomicFile;->openRead()Ljava/io/FileInputStream; (0x14) ---> Ljava/io/File;->delete()Z
               => Landroidx/core/util/AtomicFile;->startWrite()Ljava/io/FileOutputStream; (0x7e) ---> Ljava/io/File;->delete()Z
               => Landroidx/exifinterface/media/ExifInterface;->saveAttributes()V (0x9c) ---> Ljava/io/File;->delete()Z
               => Landroidx/exifinterface/media/ExifInterface;->saveAttributes()V (0xc8) ---> Ljava/io/File;->delete()Z
               => Lcom/mtb/mobilebanking/FileCache;->clear()V (0x1e) ---> Ljava/io/File;->delete()Z
               => Landroidx/documentfile/provider/b;->a(Ljava/io/File;)Z (0x34) ---> Ljava/io/File;->delete()Z
               => Landroidx/documentfile/provider/b;->delete()Z (0xe) ---> Ljava/io/File;->delete()Z
               => Lokhttp3/internal/io/FileSystem$1;->delete(Ljava/io/File;)V (0x0) ---> Ljava/io/File;->delete()Z
               => Lokhttp3/internal/io/FileSystem$1;->deleteContents(Ljava/io/File;)V (0x2a) ---> Ljava/io/File;->delete()Z
               => Lcom/google/android/gms/common/data/BitmapTeleporter;->a()Ljava/io/FileOutputStream; (0x32) ---> Ljava/io/File;->delete()Z
               => Lkotlin/io/d;->copyRecursively(Ljava/io/File; Ljava/io/File; Z Lkotlin/jvm/functions/Function2;)Z (0x12e) --->
                    Ljava/io/File;->delete()Z
               => Lkotlin/io/d;->copyTo(Ljava/io/File; Ljava/io/File; Z I)Ljava/io/File; (0x34) ---> Ljava/io/File;->delete()Z
               => Lkotlin/io/d;->createTempDir(Ljava/lang/String; Ljava/lang/String; Ljava/io/File;)Ljava/io/File; (0x12) --->
                    Ljava/io/File;->delete()Z
               => Lkotlin/io/d;->deleteRecursively(Ljava/io/File;)Z (0x3a) ---> Ljava/io/File;->delete()Z
[Notice] <Debug><Hacker> Codes for Checking Android Debug Mode (Vector ID: HACKER_DEBUGGABLE_CHECK):
           Found codes for checking "ApplicationInfo.FLAG_DEBUGGABLE" in AndroidManifest.xml:
               => Lcom/google/android/gms/common/GoogleSignatureVerifier;->a (Ljava/lang/String;)Lcom/google/android/gms/common/j;
               => Lcom/google/android/gms/common/GoogleSignatureVerifier;->a (Ljava/lang/String; I)Lcom/google/android/gms/common/j;
[Notice] <Signature><Hacker> Getting Signature Code Checking (Vector ID: HACKER_SIGNATURE_CHECK):
           This app has code checking the package signature in the code. It might be used to check for whether the app is hacked by the
           attackers.
               => Landroidx/core/provider/FontsContractCompat;->getProvider(Landroid/content/pm/PackageManager;
                    Landroidx/core/provider/FontRequest; Landroid/content/res/Resources;)Landroid/content/pm/ProviderInfo; (0x36) --->
                    Landroid/content/pm/PackageManager;->getPackageInfo(Ljava/lang/String; I)Landroid/content/pm/PackageInfo;
               => Lcom/google/android/gms/common/GooglePlayServicesUtilLight;->a(Landroid/content/Context; Z I)I (0x50) --->
                    Landroid/content/pm/PackageManager;->getPackageInfo(Ljava/lang/String; I)Landroid/content/pm/PackageInfo;
               => Lcom/google/android/gms/common/util/UidVerifier;->isGooglePlayServicesUid(Landroid/content/Context; I)Z (0x20) --->
                    Landroid/content/pm/PackageManager;->getPackageInfo(Ljava/lang/String; I)Landroid/content/pm/PackageInfo;
               => Lcom/google/android/gms/common/wrappers/PackageManagerWrapper;->zza(Ljava/lang/String; I
                    I)Landroid/content/pm/PackageInfo; (0x10) ---> Landroid/content/pm/PackageManager;->getPackageInfo(Ljava/lang/String;
                    I)Landroid/content/pm/PackageInfo;
[Info]  AndroidManifest Adb Backup Checking (Vector ID: ALLOW_BACKUP):
           This app has disabled Adb Backup.
[Info] <Command> Runtime Command Checking (Vector ID: COMMAND):
           This app is not using critical function 'Runtime.getRuntime().exec("...")'.
[Info] <Command> Executing "root" or System Privilege Checking (Vector ID: COMMAND_MAYBE_SYSTEM):
           Did not find codes checking "root" permission(su) or getting system permission (It's still possible we did not find out).
[Info] <Database> SQLiteDatabase Transaction Deprecated Checking (Vector ID: DB_DEPRECATED_USE1):
           Ignore checking "SQLiteDatabase:beginTransactionNonExclusive" because your set minSdk >= 11.
[Info] <Database> Android SQLite Databases Encryption (SQLite Encryption Extension (SEE)) (Vector ID: DB_SEE):
           This app is "NOT" using SQLite Encryption Extension (SEE) on Android (http://www.sqlite.org/android) to encrypt or decrpyt
           databases.
[Info] <Database> Android SQLite Databases Encryption (SQLCipher) (Vector ID: DB_SQLCIPHER):
           This app is "NOT" using SQLCipher(http://sqlcipher.net/) to encrypt or decrpyt databases.
[Info] <Debug> Android Debug Mode Checking (Vector ID: DEBUGGABLE):
           DEBUG mode is OFF(android:debuggable="false") in AndroidManifest.xml.
[Info]  Dynamic Code Loading (Vector ID: DYNAMIC_CODE_LOADING):
           No dynamic code loading(DexClassLoader) found.
[Info] <Framework> Framework - MonoDroid (Vector ID: FRAMEWORK_MONODROID):
           This app is NOT using MonoDroid Framework (http://xamarin.com/android).
[Info] <Hacker> Base64 String Encryption (Vector ID: HACKER_BASE64_STRING_DECODE):
           No encoded Base64 String or Urls found.
[Info] <Database><Hacker> Key for Android SQLite Databases Encryption (Vector ID: HACKER_DB_KEY):
           Did not find using the symmetric key(PRAGMA key) to encrypt the SQLite databases (It's still possible that it might use but we
           did not find out).
[Info] <Hacker> APK Installing Source Checking (Vector ID: HACKER_INSTALL_SOURCE_CHECK):
           Did not detect this app checks for APK installer sources.
[Info] <KeyStore><Hacker> KeyStore File Location (Vector ID: HACKER_KEYSTORE_LOCATION1):
           Did not find any possible BKS keystores or certificate keystore file (Notice: It does not mean this app does not use keysotre):
[Info] <Hacker> Code Setting Preventing Screenshot Capturing (Vector ID: HACKER_PREVENT_SCREENSHOT_CHECK):
           Did not detect this app has code setting preventing screenshot capturing.
[Info]  HttpURLConnection Android Bug Checking (Vector ID: HTTPURLCONNECTION_BUG):
           Ignore checking "http.keepAlive" because you're not using "HttpURLConnection" and min_Sdk > 8.
[Info] <KeyStore> KeyStore Type Checking (Vector ID: KEYSTORE_TYPE_CHECK):
           KeyStore 'BKS' type check OK
[Info]  Google Cloud Messaging Suggestion (Vector ID: MANIFEST_GCM):
           Nothing to suggest.
[Info] <#CVE-2013-4787#> Master Key Type I Vulnerability (Vector ID: MASTER_KEY):
           No Master Key Type I Vulnerability in this APK.
[Info]  App Sandbox Permission Checking (Vector ID: MODE_WORLD_READABLE_OR_MODE_WORLD_WRITEABLE):
           No security issues "MODE_WORLD_READABLE" or "MODE_WORLD_WRITEABLE" found on 'openOrCreateDatabase' or 'openOrCreateDatabase2' or
           'getDir' or 'getSharedPreferences' or 'openFileOutput'
[Info]  Native Library Loading Checking (Vector ID: NATIVE_LIBS_LOADING):
           No native library loaded.
[Info]  AndroidManifest Dangerous ProtectionLevel of Permission Checking (Vector ID: PERMISSION_DANGEROUS):
           No "dangerous" protection level customized permission found (AndroidManifest.xml).
[Info]  AndroidManifest Exported Components Checking (Vector ID: PERMISSION_EXPORTED):
           No exported components(except for Launcher) for receiving Android or outside applications' actions (AndroidManifest.xml).
[Info]  AndroidManifest PermissionGroup Checking (Vector ID: PERMISSION_GROUP_EMPTY_VALUE):
           PermissionGroup in permission tag of AndroidManifest sets correctly.
[Info] <Implicit_Intent> Implicit Service Checking (Vector ID: PERMISSION_IMPLICIT_SERVICE):
           No dangerous implicit service.
[Info]  AndroidManifest "intent-filter" Settings Checking (Vector ID: PERMISSION_INTENT_FILTER_MISCONFIG):
           "intent-filter" of AndroidManifest.xml check OK.
[Info]  AndroidManifest Normal ProtectionLevel of Permission Checking (Vector ID: PERMISSION_NORMAL):
           No default or "normal" protection level customized permission found (AndroidManifest.xml).
[Info] <#CVE-2013-6272#> AndroidManifest Exported Lost Prefix Checking (Vector ID: PERMISSION_NO_PREFIX_EXPORTED):
           No exported components that forgot to add "android:" prefix.
[Info]  AndroidManifest ContentProvider Exported Checking (Vector ID: PERMISSION_PROVIDER_IMPLICIT_EXPORTED):
           No exported "ContentProvider" found (AndroidManifest.xml).
[Info] <Sensitive_Information> Getting ANDROID_ID (Vector ID: SENSITIVE_SECURE_ANDROID_ID):
           Did not detect this app is getting the 64-bit number "Settings.Secure.ANDROID_ID".
[Info]  Codes for Sending SMS (Vector ID: SENSITIVE_SMS):
           Did not detect this app has code for sending SMS messages (sendDataMessage, sendMultipartTextMessage or sendTextMessage).
[Info] <System> AndroidManifest sharedUserId Checking (Vector ID: SHARED_USER_ID):
           This app does not use "android.uid.system" sharedUserId.
[Info] <SSL_Security> SSL Implementation Checking (Verifying Host Name in Fields) (Vector ID: SSL_CN2):
           Critical vulnerability "ALLOW_ALL_HOSTNAME_VERIFIER" field setting or "AllowAllHostnameVerifier" class instance not found.
[Info] <SSL_Security> SSL Implementation Checking (Insecure component) (Vector ID: SSL_CN3):
           Did not detect SSLSocketFactory by insecure method "getInsecure".
[Info] <SSL_Security> SSL Implementation Checking (HttpHost) (Vector ID: SSL_DEFAULT_SCHEME_NAME):
           DEFAULT_SCHEME_NAME for HttpHost check: OK
[Info]  Unnecessary Permission Checking (Vector ID: USE_PERMISSION_ACCESS_MOCK_LOCATION):
           Permission 'android.permission.ACCESS_MOCK_LOCATION' sets correctly.
[Info]  Accessing the Internet Checking (Vector ID: USE_PERMISSION_INTERNET):
           This app is using the Internet via HTTP protocol.
[Info]  AndroidManifest System Use Permission Checking (Vector ID: USE_PERMISSION_SYSTEM_APP):
           No system-level critical use-permission found.
[Info] <WebView><Remote Code Execution><#CVE-2013-4710#> WebView RCE Vulnerability Checking (Vector ID: WEBVIEW_RCE):
           WebView addJavascriptInterface vulnerabilities not found.
------------------------------------------------------------
AndroBugs analyzing time: 13.313328 secs
Total elapsed time: 60.624941 secs
<<< Analysis result has stored into database (analyze_engine_build: 2019040301, analyze_tag: Fund) >>>
